syntax = "proto3";

package tensorflow.serving;
option cc_enable_arenas = true;

import "model.proto";

// PredictRequest specifies which TensorFlow model to run, as well as
// how inputs are mapped to tensors and how outputs are filtered before
// returning to user.
message PredictRequest {
  // Model Specification.
  ModelSpec model_spec = 1;

  // Input tensors.
  // Names of input tensor are alias names. The mapping from aliases to real
  // input tensor names is expected to be stored as named generic signature
  // under the key "inputs" in the model export.
  // Each alias listed in a generic signature named "inputs" should be provided
  // exactly once in order to run the prediction.
  //map<string, TensorProto> inputs = 2;
  map<string, bytes> inputs = 2;
  repeated uint32 sizes = 3;
  int32    img_num = 4;
  repeated bytes string_val = 5;
  // Output filter.
  // Names specified are alias names. The mapping from aliases to real output
  // tensor names is expected to be stored as named generic signature under
  // the key "outputs" in the model export.
  // Only tensors specified here will be run/fetched and returned, with the
  // exception that when none is specified, all tensors specified in the
  // named signature will be run/fetched and returned.
  repeated string output_filter = 6;
}

message ResponseContext{
  repeated float float_val = 1 [packed = true];

  // DT_DOUBLE.
  //repeated double double_val = 2 [packed = true];

  // DT_INT32, DT_INT16, DT_INT8, DT_UINT8.
  repeated int32 int_val = 2 [packed = true];

  // DT_STRING
  repeated bytes string_val = 3;

 // DT_INT64
  repeated int64 int64_val = 4 [packed = true];
}

// Response for PredictRequest on successful run.
message PredictResponse {
  // Output tensors.
  //map<string, TensorProto> outputs = 1;
  map<string, ResponseContext> outputs = 1;
}
